
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/Mux4Way16.hdl
/**
 * 4-way 16-bit multiplexor:
 * out = a if sel = 00
 *       b if sel = 01
 *       c if sel = 10
 *       d if sel = 11
 */
CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];
    
    PARTS:
    Mux(a=a[0]  , b=b[0]  , sel=sel[0] , out=muxL0);
    Mux(a=c[0]  , b=d[0]  , sel=sel[0] , out=muxR0);
    Mux(a=muxL0 , b=muxR0 , sel=sel[1] , out=out[0] );

    Mux(a=a[1]  , b=b[1]  , sel=sel[0] , out=muxL1);
    Mux(a=c[1]  , b=d[1]  , sel=sel[0] , out=muxR1);
    Mux(a=muxL1 , b=muxR1 , sel=sel[1] , out=out[1] );

    Mux(a=a[2]  , b=b[2]  , sel=sel[0] , out=muxL2);
    Mux(a=c[2]  , b=d[2]  , sel=sel[0] , out=muxR2);
    Mux(a=muxL2 , b=muxR2 , sel=sel[1] , out=out[2] );

    Mux(  a=a[3]  , b=b[3]  , sel=sel[0] , out=muxL3);
    Mux(  a=c[3]  , b=d[3]  , sel=sel[0] , out=muxR3);
    Mux(a=muxL3 , b=muxR3   , sel=sel[1] , out=out[3] );

    Mux(  a=a[4]  , b=b[4]  , sel=sel[0] , out=muxL4);
    Mux(  a=c[4]  , b=d[4]  , sel=sel[0] , out=muxR4);
    Mux(a=muxL4 , b=muxR4   , sel=sel[1] , out=out[4] );

    Mux(  a=a[5]  , b=b[5]  , sel=sel[0] , out=muxL5);
    Mux(  a=c[5]  , b=d[5]  , sel=sel[0] , out=muxR5);
    Mux(a=muxL5 , b=muxR5   , sel=sel[1] , out=out[5] );
                                       
    Mux(  a=a[6]  , b=b[6]  , sel=sel[0] , out=muxL6);
    Mux(  a=c[6]  , b=d[6]  , sel=sel[0] , out=muxR6);
    Mux(a=muxL6 , b=muxR6   , sel=sel[1] , out=out[6] );

    Mux(  a=a[7]  , b=b[7]  , sel=sel[0] , out=muxL7);
    Mux(  a=c[7]  , b=d[7]  , sel=sel[0] , out=muxR7);
    Mux(a=muxL7 , b=muxR7   , sel=sel[1] , out=out[7] );
                                       
    Mux(  a=a[8]  , b=b[8]  , sel=sel[0] , out=muxL8);
    Mux(  a=c[8]  , b=d[8]  , sel=sel[0] , out=muxR8);
    Mux(a=muxL8 , b=muxR8   , sel=sel[1] , out=out[8] );
                                       
    Mux(  a=a[9]  , b=b[9]  , sel=sel[0] , out=muxL9);
    Mux(  a=c[9]  , b=d[9]  , sel=sel[0] , out=muxR9);
    Mux(a=muxL9 , b=muxR9   , sel=sel[1] , out=out[9] );
                                       
    Mux(  a=a[10]  , b=b[10]  , sel=sel[0] , out=muxL10);
    Mux(  a=c[10]  , b=d[10]  , sel=sel[0] , out=muxR10);
    Mux(a=muxL10 , b=muxR10   , sel=sel[1] , out=out[10] );

    Mux(  a=a[11]  , b=b[11]  , sel=sel[0] , out=muxL11);
    Mux(  a=c[11]  , b=d[11]  , sel=sel[0] , out=muxR11);
    Mux(a=muxL11 , b=muxR11   , sel=sel[1] , out=out[11] );

    Mux(  a=a[12]  , b=b[12]  , sel=sel[0] , out=muxL12);
    Mux(  a=c[12]  , b=d[12]  , sel=sel[0] , out=muxR12);
    Mux(a=muxL12 , b=muxR12   , sel=sel[1] , out=out[12] );
                                         
    Mux(  a=a[13]  , b=b[13]  , sel=sel[0] , out=muxL13);
    Mux(  a=c[13]  , b=d[13]  , sel=sel[0] , out=muxR13);
    Mux(a=muxL13 , b=muxR13   , sel=sel[1] , out=out[13] );

    Mux(  a=a[14]  , b=b[14]  , sel=sel[0] , out=muxL14);
    Mux(  a=c[14]  , b=d[14]  , sel=sel[0] , out=muxR14);
    Mux(a=muxL14 , b=muxR14   , sel=sel[1] , out=out[14] );
                                         
    Mux(  a=a[15]  , b=b[15]  , sel=sel[0] , out=muxL15);
    Mux(  a=c[15]  , b=d[15]  , sel=sel[0] , out=muxR15);
    Mux(a=muxL15 , b=muxR15   , sel=sel[1] , out=out[15] );
  }
